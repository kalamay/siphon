libsiphon(3) -- Library for protocol and data format pull parsers
=================================================================



## DESCRIPTION

Siphon is a library of highly optimized parsers for common protocol and data
formats. The design goal is to give as much control as possible to the
caller while maintaining a minimal interface. Additionally, it should provide
a flexible interface for binding to from other languages. Most of this code
was developed while binding it to LuaJITs FFI.

Most of the parsers use a pull model: that is, the caller requests the next
value from an input buffer. This allows the caller to manage the continuation
of the parser as well as the memory used for the tokens.

The library aims to make little to no memory allocations and instead prefers that
the caller maintain the input buffer until a value may be extracted from it. The
parser will not extract the value itself, but instead provide the bounds for the
value within the buffer.

Similarly, for plain byte sequences (HTTP bodies, MsgPack strings, binary and
extension values), siphon will require that the caller handle the value. This
requires a little more work, but it enables much more powerful usages. 
Particularly this enables mixing of zero-copy primatives with the parser. For
example, a process could use `splice(2)` to transfer a msgpack string from a
back-end parser, to an HTTP response body, or splice an incoming HTTP request
directly to disk.



## MODULES

* Error:
  Managment system with support for system, library and custom defined errors.
  See libsiphon-error(3).

* HTTP:
  Pull parser for HTTP 1.x request and response data streams.
  See libsiphon-http(3).

* JSON:
  Pull parser for JavaScript Object Notation formatted data streams.
  See libsiphon-json(3).

* MsgPack:
  Pull parser for MsgPack formatted data streams.
  See libsiphon-msgpack(3).

* Line:
  Pull parser for line protocols.
  See libsiphon-line(3).

* URI:
  Single-pass URI parser.
  See libsiphon-uri(3).

* Path:
  Utility for working with Unix paths
  See libsiphon-path(3).

* CRC:
  Optimized CRC32 and CRC32c functions.
  See libsiphon-crc(3).



## SEE ALSO

libsiphon-error(3), libsiphon-http(3), libsiphon-json(3), libsiphon-msgpack(3),
libsiphon-line(3), libsiphon-uri(3), libsiphon-path(3), libsiphon-crc(3)

